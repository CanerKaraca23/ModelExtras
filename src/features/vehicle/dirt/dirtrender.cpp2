
#include "pch.h"
#include "CTxdStore.h"
#include "CClothesBuilder.h"
#include <CVehicleModelInfo.h>
#include <rw/rpworld.h>
#include "dirtrender.h"
#include "util.h"

void __fastcall CVehicleModelInfo_FindEditableMaterialList(CVehicleModelInfo *pInfo)
{
	std::vector<RpMaterial *> editableMaterials;

	RpClump *pClump = pInfo->m_pRwClump;
	RpAtomic *atomic;
	RpGeometry *Geometry;

	for (RwLLLink *link = rwLinkListGetFirstLLLink(&pClump->atomicList); link != rwLinkListGetTerminator(&pClump->atomicList); link = rwLLLinkGetNext(link))
	{
		atomic = rwLLLinkGetData(link, RpAtomic, inClumpLink);
		if (atomic == nullptr)
			break;
		Geometry = atomic->geometry;
		int NumMaterials = Geometry->matList.numMaterials;
		for (int i = 0; i < NumMaterials; i++)
		{
			if (RwTexture *texture = RpMaterialGetTexture(Geometry->matList.materials[i]))
			{
				if (const char *texName = RwTextureGetName(texture))
				{
					if (strcmp(texName, "vehiclegrunge256") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);

					if (strcmp(texName, "vehicle_genericmud_truck") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);

					if (strcmp(texName, "vehiclegrunge_iv") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);
				}
			}
		}
	}

	//
	//	FindDirtMaterials(m_pVehicleStruct->m_apExtras[i], &editableMaterials);

	for (uint32_t i = 0; i < pInfo->m_pVehicleStruct->m_nNumExtras; i++)
	{
		Geometry = pInfo->m_pVehicleStruct->m_apExtras[i]->geometry;
		int NumMaterials = Geometry->matList.numMaterials;
		for (int i = 0; i < NumMaterials; i++)
		{
			if (RwTexture *texture = RpMaterialGetTexture(Geometry->matList.materials[i]))
			{
				if (const char *texName = RwTextureGetName(texture))
				{
					if (strcmp(texName, "vehiclegrunge256") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);

					if (strcmp(texName, "vehicle_genericmud_truck") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);

					if (strcmp(texName, "vehiclegrunge_iv") == 0)
						editableMaterials.push_back(Geometry->matList.materials[i]);
				}
			}
		}
	}

	struct MyWrapper
	{
		RpMaterial **m_dirtMaterials;
		size_t m_numDirtMaterials;
		RpMaterial *m_staticDirtMaterials[30];
	};
	auto wrap = (MyWrapper *)&pInfo->m_apDirtMaterials;

	wrap->m_numDirtMaterials = editableMaterials.size();
	if (wrap->m_numDirtMaterials > 30)
	{
		wrap->m_dirtMaterials = new RpMaterial *wrap->m_numDirtMaterials];
		std::copy(editableMaterials.begin(), editableMaterials.end(), stdext::make_checked_array_iterator(wrap->m_dirtMaterials, wrap->m_numDirtMaterials));
	}
	else
	{
		wrap->m_dirtMaterials = nullptr;
		// Use existing space instead of allocating new space
		std::copy(editableMaterials.begin(), editableMaterials.end(), wrap->m_staticDirtMaterials);
	}
	pInfo->m_nCurrentPrimaryColor = -1;
	pInfo->m_nCurrentSecondaryColor = -1;
	pInfo->m_nCurrentQuaternaryColor = -1;
	pInfo->m_nCurrentTertiaryColor = -1;
}

void CVehicleModelInfo_RemapDirt(CVehicleModelInfo *modelInfo, uint32_t dirtID)
{
	RpMaterial **materials = modelInfo->m_numDirtMaterials > CVehicleModelInfo::IN_PLACE_BUFFER_DIRT_SIZE ? modelInfo->m_dirtMaterials : modelInfo->m_staticDirtMaterials;

	for (size_t i = 0; i < modelInfo->m_numDirtMaterials; i++)
	{
		// RpMaterialSetTexture(materials[i], materials[i]->texture);

		if (strcmp(materials[i]->texture->name, "vehicle_genericmud_truck") == 0)
			RpMaterialSetTexture(materials[i], DirtRender::ms_aDirtTextures_2[dirtID]);

		if (strcmp(materials[i]->texture->name, "vehiclegrunge_iv") == 0)
			RpMaterialSetTexture(materials[i], DirtRender::ms_aDirtTextures_3[dirtID]);

		if (strcmp(materials[i]->texture->name, "vehiclegrunge256") == 0)
			RpMaterialSetTexture(materials[i], DirtRender::ms_aDirtTextures[dirtID]);
	}
}

void DirtRender::Shutdown()
{
	((void(__cdecl *)())0x5D5AD0)(); // void __cdecl CCarFXRenderer::Shutdown()
	for (int i = 0; i < 16; i++)
	{
		RwTextureDestroy(ms_aDirtTextures_2[i]);
		RwTextureDestroy(ms_aDirtTextures_3[i]);
		// RwTextureDestroy(ms_aDirtTextures_4[i]);
		// RwTextureDestroy(ms_aDirtTextures_5[i]);
		// RwTextureDestroy(ms_aDirtTextures_6[i]);
	}
}

void DirtRender::InitDirtTextures()
{
	((void(__cdecl *)())0x5D5BC0)(); // signed int __cdecl CCarFXRenderer::InitialiseDirtTexture()
	InitDirtTextureSingle((char *)"vehiclegrunge_iv", ms_aDirtTextures_3);
	InitDirtTextureSingle((char *)"vehicle_genericmud_truck", ms_aDirtTextures_2);
}

RwTexture *RwTextureRead(const char *name, const char *mask)
{
	return plugin::CallAndReturn<RwTexture *, 0x07F3AC0>(name, mask);
}

void DirtRender::InitDirtTextureSingle(char *name, RwTexture **dirtTextureArray)
{
	RwTexture *texture;

	int Textureindex = CTxdStore::FindTxdSlot("VEHICLE");
	if (Textureindex == -1)
	{
		Textureindex = CTxdStore::AddTxdSlot("VEHICLE");
		CTxdStore::LoadTxd(Textureindex, "MODELS\\GENERIC\\VEHICLE.TXD");
		CTxdStore::AddRef(Textureindex);
	}
	CTxdStore::PushCurrentTxd();
	CTxdStore::SetCurrentTxd(Textureindex);
	// texture = RwReadTexture("vehicle_genericmud_truck", 0);
	texture = RwTextureRead(name, 0);
	texture->filterAddressing = 2;

	for (int texid = 0; texid < 16; texid++)
	{
		dirtTextureArray[texid] = CClothesBuilder::CopyTexture(texture);
		;
		RwTextureSetName(dirtTextureArray[texid], name);

		RwRaster *Dirtraster = dirtTextureArray[texid]->raster;
		RwUInt8 *dirtArray = RwRasterLock(Dirtraster, 0, 3);
		RwUInt8 *PointertoPixel = dirtArray;
		int width_counter = 0;
		int alpha = (4080 - (texid * 255)) / 16;

		for (int i = 1; i < texture->raster->height; i++)
		{
			PointertoPixel = (dirtArray + width_counter);

			for (int i2 = 0; i2 < texture->raster->width; i2++)
			{
				*(PointertoPixel + 0) = *(PointertoPixel + 0) / 16 * texid + alpha;
				*(PointertoPixel + 1) = *(PointertoPixel + 1) / 16 * texid + alpha;
				*(PointertoPixel + 2) = *(PointertoPixel + 2) / 16 * texid + alpha;
				PointertoPixel += 4;
			}
			width_counter = i * texture->raster->width * 4;
		}
		RwRasterUnlock(Dirtraster);
	}
	CTxdStore::PopCurrentTxd();
}

void DirtRender::Initialize()
{
	plugin::patch::ReplaceFunctionCall(0x53CA75, Shutdown);
	plugin::patch::ReplaceFunctionCall(0x53CA61, Shutdown);
	plugin::patch::ReplaceFunctionCall(0x5B8FFD, InitDirtTextures);

	plugin::patch::ReplaceFunction(0x5D5DB0, CVehicleModelInfo_RemapDirt);
	plugin::patch::ReplaceFunctionCall(0x4C9648, CVehicleModelInfo_FindEditableMaterialList);
	plugin::patch::Set<DWORD>(0x4C964D, 0x0FEBCE8B);

	// plugin::patch::ReplaceFunction(0x4C8220, CVehicleModelInfo_SetEditableMaterialsCB);

	// MemoryVP::InjectHook(0x53CA75, &DirtRender::Shutdown, PATCH_CALL);
	// MemoryVP::InjectHook(0x53CA61, &DirtRender::Shutdown, PATCH_CALL);
	// MemoryVP::InjectHook(0x5B8FFD, &DirtRender::InitDirtTextures, PATCH_CALL);

	// // Patch New Dirt Materials (includes silents fix for Dirtlevels)
	// MemoryVP::InjectHook(0x5D5DB0, &CVehicleModelInfo::RemapDirt, PATCH_JUMP);
	// MemoryVP::InjectHook(0x4C9648, &CVehicleModelInfo_FindEditableMaterialList, PATCH_CALL);
	// MemoryVP::Patch<DWORD>(0x4C964D, 0x0FEBCE8B);

	// MemoryVP::InjectHook(0x4C8220, &CVehicleModelInfo::SetEditableMaterialsCBb, PATCH_JUMP);
}
